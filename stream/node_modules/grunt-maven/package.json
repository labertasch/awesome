{
  "name": "grunt-maven",
  "description": "Grunt tasks for grunt-maven-plugin Maven+Grunt workflow.",
  "version": "1.2.0",
  "homepage": "https://github.com/allegro/grunt-maven-npm",
  "author": {
    "name": "Adam Dubiel"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/allegro/grunt-maven-npm.git"
  },
  "bugs": {
    "url": "https://github.com/allegro/grunt-maven-npm/issues"
  },
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "https://github.com/allegro/grunt-maven-npm/blob/master/LICENSE-Apache-2.0"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-copy": "~0.5.0",
    "grunt-execute": "~0.1.5",
    "grunt": "~0.4.2",
    "lodash": "~2.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.2"
  },
  "keywords": [
    "gruntplugin",
    "maven"
  ],
  "readme": "# grunt-maven\n\n**npm** tasks for [grunt-maven-plugin](http://https://github.com/allegro/grunt-maven-plugin).\n\n**grunt-maven-plugin** NPM tasks power Maven+Grunt integrated workflow. These tasks depend on properties file produced\nby grunt-maven-plugin, which contains paths and options derived from projects pom.xml.\n\n## Getting started\n\nAdd plugin dependency to your **package.json**:\n\n```js\n\"devDependencies\": {\n  \"grunt-maven\": \"~1.1.0\",\n}\n```\n\nLoad tasks in Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-maven');\n```\n\n## mavenPrepare task\n\n### Overview\n\nThis tasks role is to copy raw sources from Maven webapp sources to `target-grunt`, where Grunt tasks will be executed.\nIn your project's Gruntfile, add a section named `mavenPrepare` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  mavenPrepare: {\n    options: {\n      resources: ['**']\n    },\n    dev: {\n    },\n    prod: {\n      resources: ['**', '!dev/**']\n    }\n  },\n});\n```\n\n### Options\n\n#### options.resources\nType: `Array`\n\nList of patterns that will be evaluated using [minimatch](https://github.com/isaacs/minimatch) to choose resources that\nwill be copied from Maven webapp to target-grunt.\n\n## mavenDist task\n\n### Overview\n`mavenDist` task copies artifacts produced by Grunt (less -> css, minified JS) from `target-grunt` to `target-grunt/dist`\nand from `target-grunt` to Maven WAR directory.\n\n```js\ngrunt.initConfig({\n  mavenDist: {\n    options: {\n      warName: 'war',\n      deliverables: ['**', '!non-deliverable.js'],\n      gruntDistDir: 'dist'\n    },\n    dev: {\n      warName: 'war-dev'\n    }\n  },\n});\n```\n\n### Options\n\n#### options.warName\nType: `String`\n\nName of WAR directory, residing in `/target/`, to which all deliverables will be copied.\n\n#### options.deliverables\nType: `Array`\n\nList of patterns that will be evaluated using [minimatch](https://github.com/isaacs/minimatch) to choose deliverables that\nwill be copied from `target-grunt/` to `target-grunt/dist` and to WAR.\n\n#### options.workingDirectory\nType: `String`\nDefault: Directory where gruntfile is located\n\nDeliverable patterns will be matched relative to this path, and all returned filepaths will also be relative to this path.\n\n#### options.gruntDistDir\nType: `String`\nDefault: `dist`\n\nName of directory residing in `target-grunt`, where all deliverables will be copied.\n\n\n## Using maven* tasks\n\nEach defined task that wants to operate on resources from Maven, should start with `mavenPrepare` and end with `mavenDist`,\nfor example:\n\n```js\ngrunt.registerTask('default', ['mavenPrepare', 'jshint', 'karma', 'less', 'uglify', 'mavenDist']);\n```\n\n* prepare environment in `target-grunt`\n* run all Grunt specific tasks in `target-grunt`\n* copy deliverables to WAR\n\n### watch\n\nUsing `grunt-contrib-watch` can be very useful to create good development environment, just register whatever task\nyou should need to run on resources change, using properties generated by **grunt-maven-plugin** to obtain watch path:\n\n```js\ngrunt.initConfig({\n    gruntMavenProperties: grunt.file.readJSON('grunt-maven.json'),\n\n    watch: {\n        maven: {\n            files: ['<%= gruntMavenProperties.filesToWatch %>'],\n            tasks: 'default'\n        }\n    }\n});\n\n```\n\n`gruntMavenProperties.filesToWatch` evaluates to `/src/main/webapp/statics_dir/**`. If you need to exclude some resources from\nbeing watched (although you probably shouldn't need to), use `gruntMavenProperties.directoryToWatch`. This is simply path\nto directory without globing pattern appended, in our case: `/src/main/webapp/statics_dir`.\n\n## License\n\n**grunt-maven-plugin** NPM tasks are published under [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-maven@1.2.0",
  "dist": {
    "shasum": "114dc446ffd368c52a39a25818382cd85485f879"
  },
  "_from": "grunt-maven@",
  "_resolved": "https://registry.npmjs.org/grunt-maven/-/grunt-maven-1.2.0.tgz"
}
